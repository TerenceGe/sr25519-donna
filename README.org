#+title: sr25519-donna

This is a pure C implementation of polkadot's key derivation and signing algorithm [[https://wiki.polkadot.network/docs/en/learn-cryptography][schnorrkel]]. The goal is to fully compatible with the original [[https://github.com/w3f/schnorrkel][rust version]]. The curve operations are based on [[https://github.com/floodyberry/ed25519-donna][ed25519-donna]]. [[https://github.com/w3f/General-Grants-Program/blob/master/grants/accepted_grant_applications.md#wave-6][file:https://raw.githubusercontent.com/w3f/Open-Grants-Program/master/src/web3%20foundation%20grants_black.jpg]]
* Compilation
** Default Options
#+BEGIN_SRC sh
git clone git@github.com:TerenceGe/sr25519-donna.git
cd sr25519-donna
mkdir build && cd build
cmake .. -DCMAKE_INSTALL_PREFIX=. && make install # The options "-DCMAKE_INSTALL_PREFIX=." will install library in the build folder, you can change the location if you want.
#+END_SRC
** Random Options
This library uses a build-in random number generator by default. To use a custom random function, add -DSR25519_CUSTOMRANDOM=true for cmake
#+BEGIN_SRC sh
cmake .. -DSR25519_CUSTOMRANDOM=true
#+END_SRC
put your custom random implementation in sr25519-randombytes-custom.h. The random function must implement:
#+BEGIN_SRC C
  void sr25519_randombytes(void *p, size_t len);
#+END_SRC
** Hash Options
This library uses a build-in sha2 hash function by default. To use a custom hash function, add -DSR25519_CUSTOMHASH=true for cmake
#+BEGIN_SRC sh
cmake .. -DSR25519_CUSTOMRANDOM=true
#+END_SRC
put your custom random implementation in sr25519-hash-custom.h. The random function must implement:
#+BEGIN_SRC C
  struct sr25519_hash_context;

  void sr25519_hash_init(sr25519_hash_context *ctx);
  void sr25519_hash_update(sr25519_hash_context *ctx, const uint8_t *in, size_t inlen);
  void sr25519_hash_final(sr25519_hash_context *ctx, uint8_t *hash);
  void sr25519_hash(uint8_t *hash, const uint8_t *in, size_t inlen);
#+END_SRC
** Curve Operation Options
This library supports both 32bit and 64bit curve operations, the default is according to your machine.
Add -DSR25519_FORCE_32BIT to force the use of 32 bit routines even when compiling for 64 bit.
#+BEGIN_SRC sh
cmake .. -DSR25519_FORCE_32BIT=true
#+END_SRC

* Test
#+BEGIN_SRC sh
./sr25519DonnaTests
#+END_SRC
* Integration
#+BEGIN_SRC cmake
include_directories(../build/include/) # replace it with your sr25519-donna installed location if required
link_directories(../build/lib/) # replace it with your sr25519-donna installed location if required

add_executable(yourApp ${SOURCE_FILES})
target_link_libraries(yourApp libsr25519_donna.dylib) # replace it with libsr25519_donna_static.a if you want to use static lib.

#+END_SRC
[[https://github.com/TerenceGe/sr25519-donna/blob/954fc1ff50aa919a05b23e28695dc92cab510467/example/CMakeLists.txt#L13][example]]
* Usage
** include
#+BEGIN_SRC C
    #include "sr25519-donna.h"
#+END_SRC
** create keypair from seed
#+BEGIN_SRC C
void sr25519_keypair_from_seed(sr25519_keypair keypair, const sr25519_mini_secret_key seed);
#+END_SRC
[[https://github.com/TerenceGe/sr25519-donna/blob/954fc1ff50aa919a05b23e28695dc92cab510467/example/src/main.c#L27][example]]
** sign message
#+BEGIN_SRC C
void sr25519_sign(sr25519_signature signature, const sr25519_public_key public, const sr25519_secret_key secret, const uint8_t *message, unsigned long message_length);
#+END_SRC
[[https://github.com/TerenceGe/sr25519-donna/blob/954fc1ff50aa919a05b23e28695dc92cab510467/example/src/main.c#L45][example]]
** verify message
#+BEGIN_SRC C
bool sr25519_verify(const sr25519_signature signature, const uint8_t *message, unsigned long message_length, const sr25519_public_key public);
#+END_SRC
[[https://github.com/TerenceGe/sr25519-donna/blob/954fc1ff50aa919a05b23e28695dc92cab510467/example/src/main.c#L64][example]]
** soft derive keypair
#+BEGIN_SRC C
void sr25519_derive_keypair_soft(sr25519_keypair derived, const sr25519_keypair keypair, const sr25519_chain_code chain_code);
#+END_SRC
[[https://github.com/TerenceGe/sr25519-donna/blob/954fc1ff50aa919a05b23e28695dc92cab510467/example/src/main.c#L77][example]]
** soft derive public key
#+BEGIN_SRC C
void sr25519_derive_public_soft(sr25519_public_key derived_public, const sr25519_public_key public, const sr25519_chain_code chain_code);
#+END_SRC
[[https://github.com/TerenceGe/sr25519-donna/blob/954fc1ff50aa919a05b23e28695dc92cab510467/example/src/main.c#L100][example]]
** hard derive keypair
#+BEGIN_SRC C
void sr25519_derive_keypair_hard(sr25519_keypair derived, const sr25519_keypair keypair, const sr25519_chain_code chain_code);
#+END_SRC
[[https://github.com/TerenceGe/sr25519-donna/blob/954fc1ff50aa919a05b23e28695dc92cab510467/example/src/main.c#L118][example]]
** random number generator
#+BEGIN_SRC C
void sr25519_randombytes(void *p, size_t len);
#+END_SRC
** sr25519 types
#+BEGIN_SRC C
typedef uint8_t sr25519_mini_secret_key[32];
typedef uint8_t sr25519_secret_key[64];
typedef uint8_t sr25519_secret_key_key[32];
typedef uint8_t sr25519_secret_key_nonce[32];
typedef uint8_t sr25519_chain_code[32];
typedef uint8_t sr25519_public_key[32];
typedef uint8_t sr25519_keypair[96];
typedef uint8_t sr25519_signature[64];
typedef uint8_t sr25519_vrf_output[32];
typedef uint8_t sr25519_vrf_io[64];
typedef uint8_t sr25519_vrf_proof[64];
typedef uint8_t sr25519_vrf_out_and_proof[96];
typedef uint8_t sr25519_vrf_proof_batchable[96];
typedef uint8_t sr25519_vrf_raw_output[16];
typedef uint8_t sr25519_vrf_threshold[16];
#+END_SRC
** vrf sign
#+BEGIN_SRC C
VrfResult sr25519_vrf_sign_if_less(uint8_t *out_and_proof, const sr25519_keypair keypair, const uint8_t *message, unsigned long message_length, const uint8_t *limit);
#+END_SRC
[[https://github.com/TerenceGe/sr25519-donna/blob/dc22624e80ce1c8fb4df0936678f6edcd8021dfd/example/src/main.c#L155][example]]
** vrf verify
#+BEGIN_SRC C
VrfResult sr25519_vrf_verify(const sr25519_public_key public, const uint8_t *message, unsigned long message_length, const uint8_t *output, const uint8_t *proof, const uint8_t *threshold);
#+END_SRC
[[https://github.com/TerenceGe/sr25519-donna/blob/dc22624e80ce1c8fb4df0936678f6edcd8021dfd/example/src/main.c#L169][example]]
** vrf keypair
By default, the sr25519_keypair_from_seed functon creates keypair that contains half ed25519 bytes (which is compatible with the wasm crypto lib), vrf requires the keypair is uniform. In this case, you can use sr25519_uniform_keypair_from_seed for keypair creating or sr25519_keypair_ed25519_to_uniform for converting.
#+BEGIN_SRC C
void sr25519_uniform_keypair_from_seed(sr25519_keypair keypair, const sr25519_mini_secret_key seed);
void sr25519_keypair_ed25519_to_uniform(sr25519_keypair uniform_keypair, const sr25519_keypair ed25519_keypair);
#+END_SRC
[[https://github.com/TerenceGe/sr25519-donna/blob/7dd704c0530e7aad50c7ec8e6069725f6124645a/example/src/main.c#L148][example]]
* Author
[[https://github.com/TerenceGe][Terence Ge]]
* License
[[https://en.wikipedia.org/wiki/Apache_License][Apache License]]
